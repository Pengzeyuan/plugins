package http

import (
	"fmt"

	"goa.design/goa/codegen"
	goadesign "goa.design/goa/design"
	httpcodegen "goa.design/goa/http/codegen"
	"goa.design/plugins/security/design"
)

// SecureDecoderData contains the data necessary to render the security aware
// HTTP decoder.
type SecureDecoderData struct {
	// ServiceName is the name of the service.
	ServiceName string
	// MethodName is the name of the method.
	MethodName string
	// RequestDecoder is the name of the generated decoder function.
	RequestDecoder string
	// UnsecureRequestDecoder is the name of the decoder function
	// originally generated by goa.
	UnsecureRequestDecoder string
	// UsernameField is the name of the payload field that should be
	// initialized with the basic auth username if any.
	UsernameField string
	// PasswordField is the name of the payload field that should be
	// initialized with the basic auth password if any.
	PasswordField string
	// CredField contains the name of the payload field that should
	// be initialized with the API key, the JWT token or the OAuth2
	// access token.
	CredField string
	// Scheme is the security scheme. Only initialized for API key
	// and JWT auth.
	Scheme *design.SchemeExpr
}

// Generate produces HTTP decoders that initialize the security attributes.
func Generate(files []*codegen.File) {
	for _, f := range files {
		if s := f.Section("request-decoder"); s != nil {
			data := s.Data.(*httpcodegen.EndpointData)
			payload := goadesign.Root.Service(data.ServiceName).Method(data.Method.Name).Payload
			matt := goadesign.NewMappedAttributeExpr(payload)
			for _, req := range design.Requirements(data.ServiceName, data.Method.Name) {
				for _, scheme := range req.Schemes {
					switch scheme.Kind {
					case design.BasicAuthKind:
						user := findSecurityField(matt, "security:username")
						pass := findSecurityField(matt, "security:password")
						if user == "" || pass == "" {
							continue
						}
						f.SectionTemplates = append(f.SectionTemplates, generateBasicAuth(data, user, pass))
					case design.APIKeyKind:
						keyField := findSecurityField(matt, "security:apikey:"+scheme.SchemeName)
						if keyField == "" {
							continue
						}
						f.SectionTemplates = append(f.SectionTemplates, generateAPIKey(data, scheme, keyField))
					case design.JWTKind:
						keyField := findSecurityField(matt, "security:token")
						if keyField == "" {
							continue
						}
						f.SectionTemplates = append(f.SectionTemplates, generateToken(data, scheme, keyField))
					case design.OAuth2Kind:
						keyField := findSecurityField(matt, "security:accesstoken")
						if keyField == "" {
							continue
						}
						f.SectionTemplates = append(f.SectionTemplates, generateToken(data, scheme, keyField))
					default:
						panic(fmt.Sprintf("unknown kind %#v", scheme.Kind)) // bug
					}
				}
			}
		}
	}
}

func generateBasicAuth(data *httpcodegen.EndpointData, userField, passField string) *codegen.SectionTemplate {
	d := &SecureDecoderData{
		RequestDecoder:         data.RequestDecoder,
		UnsecureRequestDecoder: "Unsecure" + data.RequestDecoder,
		UsernameField:          userField,
		PasswordField:          passField,
	}
	data.RequestDecoder = "Unsecure" + data.RequestDecoder

	return &codegen.SectionTemplate{
		Name:    "secure-request-decoder-basic",
		Source:  basicAuthDecoderT,
		Data:    d,
		FuncMap: codegen.TemplateFuncs(),
	}
}

func generateAPIKey(data *httpcodegen.EndpointData, scheme *design.SchemeExpr, keyField string) *codegen.SectionTemplate {
	d := &SecureDecoderData{
		RequestDecoder:         data.RequestDecoder,
		UnsecureRequestDecoder: "Unsecure" + data.RequestDecoder,
		CredField:              keyField,
		Scheme:                 scheme,
	}
	data.RequestDecoder = "Unsecure" + data.RequestDecoder

	return &codegen.SectionTemplate{
		Name:    "secure-request-decoder-api-key",
		Source:  apiKeyDecoderT,
		Data:    d,
		FuncMap: codegen.TemplateFuncs(),
	}
}

func generateToken(data *httpcodegen.EndpointData, scheme *design.SchemeExpr, tokenField string) *codegen.SectionTemplate {
	d := &SecureDecoderData{
		RequestDecoder:         data.RequestDecoder,
		UnsecureRequestDecoder: "Unsecure" + data.RequestDecoder,
		CredField:              tokenField,
		Scheme:                 scheme,
	}
	data.RequestDecoder = "Unsecure" + data.RequestDecoder

	return &codegen.SectionTemplate{
		Name:    "secure-request-decoder-jwt",
		Source:  tokenDecoderT,
		Data:    d,
		FuncMap: codegen.TemplateFuncs(),
	}
}

// findSecurityField returns the name of child attribute of p with the given tag
// if p is an object.
func findSecurityField(p *goadesign.MappedAttributeExpr, tag string) string {
	obj := goadesign.AsObject(p.Type)
	if obj == nil {
		return ""
	}
	for _, at := range *obj {
		if _, ok := at.Attribute.Metadata[tag]; ok {
			n := p.ElemName(at.Name)
			return codegen.Goify(n, true)
		}
	}
	return ""
}

// input: SecureDecoderData
const basicAuthDecoderT = `{{ printf "%s returns a decoder for requests sent to the %s %s endpoint that is security scheme aware." .RequestDecoder .ServiceName .MethodName | comment }}
func {{ .RequestDecoder }}(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		payload, err := {{ .UnsecureRequestDecoder }}(mux, decoder)
		if err != nil {
			return nil, err
		}
		u, p, ok := r.BasicAuth()
		if !ok {
			return payload, nil
		}
		payload.{{ .UsernameField }} = u
		payload.{{ .PasswordField }} = p

		return payload, nil
	}
}
`

// input: SecureDecoderData
const apiKeyDecoderT = `{{ printf "%s returns a decoder for requests sent to the %s %s endpoint that is security scheme aware." .RequestDecoder .ServiceName .MethodName | comment }}
func {{ .RequestDecoder }}(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		payload, err := {{ .UnsecureRequestDecoder }}(mux, decoder)
		if err != nil {
			return nil, err
		}
		{{- if eq .Scheme.In "query" }}
		payload.{{ .CredField }} = req.URL.Query().Get({{ printf "%q" .Name }})
		{{- else }}
		payload.{{ .CredField }} = req.Header.Get({{ printf "%q" .Name }})
		{{- end }}

		return payload, nil
	}
}
`

// input: SecureDecoderData
const tokenDecoderT = `{{ printf "%s returns a decoder for requests sent to the %s %s endpoint that is security scheme aware." .RequestDecoder .ServiceName .MethodName | comment }}
func {{ .RequestDecoder }}(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		payload, err := {{ .UnsecureRequestDecoder }}(mux, decoder)
		if err != nil {
			return nil, err
		}
		{{- if eq .Scheme.In "query" }}
		payload.{{ .CredField }} = req.URL.Query().Get({{ printf "%q" .Name }})
		{{- else }}
		h := req.Header.Get({{ printf "%q" .Name }})
		payload.{{ .CredField }} = strings.TrimPrefix(h, "Bearer ")
		{{- end }}

		return payload, nil
	}
}
`
