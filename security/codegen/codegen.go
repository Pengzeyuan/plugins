package codegen

import (
	"fmt"

	"goa.design/goa/codegen"
	"goa.design/goa/codegen/service"
	goadesign "goa.design/goa/design"
	"goa.design/plugins/security/design"
)

type (
	// ServiceData contains the data necessary to render the secure endpoints
	// constructor.
	ServiceData struct {
		*service.Data
		// VarName is the Go name of the service interface.
		VarName string
		// APIPkg is the name of the API package.
		APIPkg string
		// SecurityPkgName is the name of the security package.
		SecurityPkgName string
		// EndpointsVarName is the Go endpoints struct name.
		EndpointsVarName string
		// Methods list the endpoint constructors.
		Methods []*MethodData
		// Schemes is the unique security schemes for the service.
		Schemes []*design.SchemeExpr
	}

	// MethodData contains the data necessary to render
	// endpoints.
	MethodData struct {
		*service.MethodData
		// VarName is the goified name of the constructor method. It
		// differs to the name generated by goa when the endpoint
		// defines security scheme.
		VarName string
		// NonSecureVarName is the goified name of constructor method
		// generated by goa.
		NonSecureVarName string
		// ServiceName is the name of the corresponding service.
		ServiceName string
		// Requirements lists the security requirements that apply to
		// the secured method.
		Requirements []*design.SecurityExpr
		// SecurityPkgName is the name of the security package.
		SecurityPkgName string
		// Schemes is the security schemes for the method.
		Schemes []*SchemeData
	}

	// SchemeData describes a single security scheme.
	SchemeData struct {
		// UsernameField is the name of the payload field that should be
		// initialized with the basic auth username if any.
		UsernameField string
		// UsernamePointer is true if the username field is a pointer.
		UsernamePointer bool
		// PasswordField is the name of the payload field that should be
		// initialized with the basic auth password if any.
		PasswordField string
		// PasswordPointer is true if the password field is a pointer.
		PasswordPointer bool
		// CredField contains the name of the payload field that should
		// be initialized with the API key, the JWT token or the OAuth2
		// access token.
		CredField string
		// CredPointer is true if the credential field is a pointer.
		CredPointer bool
		// KeyAttr is the attribute name containing the security tag.
		KeyAttr string
		// Scheme is the security scheme expression.
		Scheme *design.SchemeExpr
	}
)

// SchemeData returns the scheme data for the given scheme.
func (m *MethodData) SchemeData(s *design.SchemeExpr) *SchemeData {
	for _, e := range m.Schemes {
		if e.Scheme.Kind == s.Kind {
			return e
		}
	}
	return nil
}

// BuildSecureServiceData builds the data needed to render the secured endpoints
// struct constructor and the secure endpoint methods.
func BuildSecureServiceData(svc *goadesign.ServiceExpr, apiPkg string) *ServiceData {
	data := &ServiceData{
		APIPkg:           apiPkg,
		Data:             service.Services.Get(svc.Name),
		SecurityPkgName:  "security",
		VarName:          service.ServiceInterfaceName,
		EndpointsVarName: service.EndpointsStructName,
	}
	var svcSchemes []*design.SchemeExpr
	svcSchemesFound := map[design.SchemeKind]bool{}
	for _, m := range svc.Methods {
		reqs := design.Requirements(svc.Name, m.Name)
		md := data.Method(m.Name)
		varn := md.VarName
		cn := "New" + varn
		if len(reqs) > 0 {
			cn = "Secure" + varn
		}
		var schemeData []*SchemeData
		for _, req := range reqs {
			for _, sch := range req.Schemes {
				schemeData = append(schemeData, BuildSchemeData(sch, m))
				if _, ok := svcSchemesFound[sch.Kind]; ok {
					continue
				}
				svcSchemesFound[sch.Kind] = true
				svcSchemes = append(svcSchemes, sch)
			}
		}
		data.Methods = append(data.Methods, &MethodData{
			MethodData:       md,
			VarName:          cn,
			NonSecureVarName: "New" + varn + "Endpoint",
			ServiceName:      svc.Name,
			Requirements:     reqs,
			SecurityPkgName:  data.SecurityPkgName,
			Schemes:          schemeData,
		})
	}
	data.Schemes = svcSchemes
	return data
}

// BuildSchemeData builds the scheme data for the given scheme and method expressions.
func BuildSchemeData(s *design.SchemeExpr, m *goadesign.MethodExpr) *SchemeData {
	if !goadesign.IsObject(m.Payload.Type) {
		return nil
	}
	switch s.Kind {
	case design.BasicAuthKind:
		userAtt, user := findSecurityField(m.Payload, "security:username")
		passAtt, pass := findSecurityField(m.Payload, "security:password")
		return &SchemeData{
			UsernameField:   user,
			UsernamePointer: m.Payload.IsPrimitivePointer(userAtt, true),
			PasswordField:   pass,
			PasswordPointer: m.Payload.IsPrimitivePointer(passAtt, true),
			Scheme:          s,
		}
	case design.APIKeyKind:
		if keyAtt, key := findSecurityField(m.Payload, "security:apikey:"+s.SchemeName); key != "" {
			return &SchemeData{
				CredField:   key,
				CredPointer: m.Payload.IsPrimitivePointer(keyAtt, true),
				KeyAttr:     keyAtt,
				Scheme:      s,
			}
		}
	case design.JWTKind:
		if keyAtt, key := findSecurityField(m.Payload, "security:token"); key != "" {
			return &SchemeData{
				CredField:   key,
				CredPointer: m.Payload.IsPrimitivePointer(keyAtt, true),
				KeyAttr:     keyAtt,
				Scheme:      s,
			}
		}
	case design.OAuth2Kind:
		if keyAtt, key := findSecurityField(m.Payload, "security:accesstoken"); key != "" {
			return &SchemeData{
				CredField:   key,
				CredPointer: m.Payload.IsPrimitivePointer(keyAtt, true),
				KeyAttr:     keyAtt,
				Scheme:      s,
			}
		}
	default:
		panic(fmt.Sprintf("unknown kind %#v", s.Kind)) // bug
	}
	return nil
}

// findSecurityField returns the name and corresponding field name of child
// attribute of p with the given tag if p is an object.
func findSecurityField(a *goadesign.AttributeExpr, tag string) (string, string) {
	obj := goadesign.AsObject(a.Type)
	if obj == nil {
		return "", ""
	}
	for _, at := range *obj {
		if _, ok := at.Attribute.Metadata[tag]; ok {
			return at.Name, codegen.Goify(at.Name, true)
		}
	}
	return "", ""
}
